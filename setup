#!/usr/bin/env bash

# shellcheck disable=1090,2034

set -e

git submodule init &>/dev/null
git submodule update &>/dev/null

source "$(dirname "$0")/lib/common.sh"
source "$(dirname "$0")/lib/string.sh"

#----------------------------------------------------------------------------

declare setup_dir=""
setup_dir="$(cd "$(dirname "$0")" && pwd -P)"
declare -r setup_dir

declare -r jq_url_darwin="https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64"
declare -r jq_url_linux="https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64"

if [[ "${home}" == "" ]]; then
  declare -r home="${HOME}"
fi

#----------------------------------------------------------------------------
# title
#----------------------------------------------------------------------------
function title() {
  info "\n$*"
}

#----------------------------------------------------------------------------
# create directories
#----------------------------------------------------------------------------
function create_directories() {
  local -a dirs=("$@")
  param_check "${dirs[*]}"

  local dir mode
  for dir in "${dirs[@]}"; do
    if [[ -d "${home}/${dir}" ]]; then
      continue
    fi

    mode="${dir##*:}"
    if [[ "${mode}" != "${dir}" ]]; then
      dir="${dir%%:*}"
    else
      mode=""
    fi

    msg "- creating ${dir}"
    mkdir -p "${home}/${dir}"
    if [[ "${mode:-}" != "" ]]; then
      chmod "${mode}" "${home}/${dir}"
    fi
  done
}

#----------------------------------------------------------------------------
# link_files
#----------------------------------------------------------------------------
function link_files() {
  local -a files=("$@")
  param_check "${files[*]}"

  local file
  for file in "${files[@]}"; do
    msg "- linking ${file}"
    ln -sf "${setup_dir}/${file}" "${home}/${file}"
  done
}

#----------------------------------------------------------------------------
# setup_bin
#   Create the bin directory and link all the files in dotfiles/bin.
#----------------------------------------------------------------------------
function setup_bin() {
  title "Create ${home}/bin"
  trap 'failed' EXIT

  create_directories "bin"

  link_files "bin/tsize"

  trap - EXIT
  success
}

#----------------------------------------------------------------------------
# download_jq
#   If jq isn't present on the system, download it into bin.
#----------------------------------------------------------------------------
function download_jq() {
  if cmd_check "jq"; then
    return "${SUCCESS}"
  fi

  title "Downloading jq"
  trap 'failed' EXIT

  local tmp jq_url
  tmp="jq_url_$(lower "$(uname)")"
  jq_url="${!tmp:-}"
  msg "- installing ${jq_url}"
  if [[ "${jq_url}" != "" ]]; then
    curl "${jq_url}" -o "${home}/bin/jq" &>/dev/null
  fi

  trap - EXIT
  success
}

#----------------------------------------------------------------------------
# setup_bash
#   Setup the bash configuration infrastructure. This links the .bash* files
#   to dotfiles, and creates a .profiles.d and an .rc.d so that we can
#   make the configuration composable.
#----------------------------------------------------------------------------
function setup_bash() {
  title "Installing bash configuration"
  trap 'failed' EXIT

  create_directories ".profile.d" ".rc.d"

  link_files ".bash_profile"  ".bashrc"                ".bash_logout" \
    ".profile.d/_defaults.sh" ".profile.d/lscolors.sh" ".profile.d/path.sh" \
    ".profile.d/prompt.sh"    ".profile.d/zz_last.sh"  ".rc.d/alias.sh"

  trap - EXIT
  success
}

#----------------------------------------------------------------------------
# setup_docker
#----------------------------------------------------------------------------
function setup_docker() {
  if ! cmd_check "docker"; then
    return "${SUCCESS}"
  fi

  title "Setup docker"
  trap 'failed' EXIT

  link_files ".rc.d/docker.sh"

  trap - EXIT
  success
}

#----------------------------------------------------------------------------
# setup_fonts
#----------------------------------------------------------------------------
function setup_fonts() {
  title "Setup fonts"
  trap 'failed' EXIT

  create_directories ".fonts"

  set +o noglob
  link_files .fonts/*
  set -o noglob

  if cmd_check "fc-cache"; then
    fc-cache -v >/dev/null
  fi

  trap - EXIT
  success
}

#----------------------------------------------------------------------------
# setup_git
#----------------------------------------------------------------------------
function setup_git() {
  title "Setup git"
  trap 'failed' EXIT

  link_files ".gitignore_global" ".rc.d/git-completion.sh" ".rc.d/git.sh"

  trap - EXIT
  success
}

#----------------------------------------------------------------------------
# setup_nvm
#----------------------------------------------------------------------------
function setup_nvm() {
  title "Setup nvm"
  trap 'failed' EXIT

  link_files ".profile.d/nvm.sh"

  trap - EXIT
  success
}

#----------------------------------------------------------------------------
# setup_projects
#----------------------------------------------------------------------------
function setup_projects() {
  title "Setup projects"
  trap 'failed' EXIT

  create_directories ".projects.d"

  link_files ".profile.d/projects.sh" ".rc.d/projects-completion.sh"

  trap - EXIT
  success
}

#----------------------------------------------------------------------------
# setup_rvm
#----------------------------------------------------------------------------
function setup_rvm() {
  title "Setup rvm"
  trap 'failed' EXIT

  link_files ".profile.d/rvm.sh"

  trap - EXIT
  success
}

#----------------------------------------------------------------------------
# setup_ssh
#----------------------------------------------------------------------------
function setup_ssh() {
  title "Setup ssh"
  trap 'failed' EXIT

  create_directories ".ssh:0700" ".ssh_keys.d"

  link_files ".profile.d/ssh-agent.sh" "bin/agent"

  trap - EXIT
  success
}

#----------------------------------------------------------------------------
# setup_terminator
#----------------------------------------------------------------------------
function setup_terminator() {
  if ! cmd_check "terminator"; then
    return "${SUCCESS}"
  fi

  title "Setup terminator"
  trap 'failed' EXIT

  create_directories ".config/terminator" ".gnome/apps"

  link_files ".config/terminator/config" ".gnome/apps/terminator.desktop"

  trap - EXIT
  success
}

#----------------------------------------------------------------------------
# setup_tmux
#----------------------------------------------------------------------------
function setup_tmux() {
  if ! cmd_check tmux; then
    return "${SUCCESS}"
  fi

  title "Setup tmux"
  trap 'failed' EXIT

  link_files ".profile.d/tmux.sh"  ".tmux.conf" "bin/start_tmux"

  trap - EXIT
  success
}

#----------------------------------------------------------------------------
# setup_vim
#----------------------------------------------------------------------------
function setup_vim() {
  if ! cmd_check vim; then
    return "${SUCCESS}"
  fi

  title "Setup vim"
  trap 'failed' EXIT

  create_directories ".vim/colors" ".vim/swapfiles" ".vim/bundle"

  link_files ".vimrc" ".vim/colors/hyper"

  if [ ! -d "${home}/.vim/bundle/Vundle.vim" ]; then
    msg "- installing vundle"
    git clone "https://github.com/VundleVim/Vundle.vim.git" "${home}/.vim/bundle/Vundle.vim" &>/dev/null
    vim +PluginInstall +qall --not-a-term >/dev/null
  fi

  trap - EXIT
  success
}

#----------------------------------------------------------------------------

function main() {
  cd "${setup_dir}" || true
  trap 'cd - &>/dev/null' RETURN

  setup_bin
  download_jq

  setup_bash
  setup_docker
  setup_fonts
  setup_git
  setup_nvm
  setup_projects
  setup_rvm
  setup_ssh
  setup_terminator
  setup_tmux
  setup_vim
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  main "$@"
fi

